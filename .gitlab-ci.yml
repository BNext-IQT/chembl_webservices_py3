variables:
    DOCKER_TLS_CERTDIR: ""
    GIT_STRATEGY: clone
    REGISTRY_USER: chembl/chembl
    APPLICATION: chembl_webservices_py3
    RELEASE_IMAGE: $CI_REGISTRY/$REGISTRY_USER/$APPLICATION:$CI_BUILD_REF_NAME
    DOCKER_IMAGE: $CI_REGISTRY/$REGISTRY_USER/$APPLICATION
    DOCKER_DRIVER: overlay

image: docker:latest

services:
    - docker:dind

stages:
    - build
    - test
    - deploy

#   build-test:
#     image: docker/compose
#     stage: build
#     when: manual
#     only:
#       - test
#     script:
#       - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#       - echo Building $DOCKER_IMAGE:${CI_COMMIT_SHORT_SHA}
#       - docker-compose build flask-prod
#       - echo Deploying $DOCKER_IMAGE:${CI_COMMIT_SHORT_SHA}
#       - docker push ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA}

build-staging:
    stage: build
    only:
       - staging
    variables:
        DOCKER_HOST: tcp://docker:2375
    script:
        - docker version # verify docker cli is there. Also prints server info
        - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
        - echo Building $DOCKER_IMAGE:${CI_COMMIT_SHORT_SHA}
        - docker build --build-arg USERNAME=${CBL_ADM_USERNAME} --build-arg UID=${CBL_ADM_UID} --build-arg GID=${CBL_PUB_GID} -t $DOCKER_IMAGE:${CI_COMMIT_SHORT_SHA} .
        - echo Deploying $DOCKER_IMAGE:${CI_COMMIT_SHORT_SHA}
        - docker push ${DOCKER_IMAGE}:${CI_COMMIT_SHORT_SHA}
    # when: manual

# tests:
#     image:
#         name: dockerhub.ebi.ac.uk/chembl/chembl/chembl_webservices_py3:${CI_COMMIT_SHORT_SHA}
#         entrypoint: ["python", "chembl_webservices_py3/tests.py"]
#     stage: test
#     only:
#         - gitlab
#     # when: manual
#     dependencies:
#         - build-prod
#     script:
#         - echo "done"

deploy-staging:
    image:
        name: lachlanevenson/k8s-kubectl:latest
        entrypoint: ["/bin/sh", "-c"]
    stage: deploy
    dependencies:
        - build-staging
    script:
        - echo $KUBE_URL_HX
        - echo "$KUBE_CA_PEM_HX" > "$(pwd)/kube.ca.pem"
        - kubectl config set-cluster ${KUBE_CLUS_NAME_HX} --server="${KUBE_URL_HX}" --certificate-authority="$(pwd)/kube.ca.pem"
        - kubectl config set-credentials ${KUBE_USER_HX} --token="${KUBE_TOKEN_HX}"
        - kubectl config set-context ${CHEMBL_NS_STAGING} --cluster=${KUBE_CLUS_NAME_HX} --user=${KUBE_USER_HX}
        - kubectl config use-context ${CHEMBL_NS_STAGING}
        - echo ${CHEMBL_NS_STAGING} ${KUBE_URL_HX} ${KUBE_CLUS_NAME_HX} ${KUBE_USER_HX}
        - kubectl get pods -n ${CHEMBL_NS_STAGING}
        - sed -i "s~<RUN_AS_UID>~${CBL_ADM_UID}~" k8s-deployment.yml
        - sed -i "s~<RUN_AS_GID>~${CBL_PUB_GID}~" k8s-deployment.yml
        - sed -i "s~<VERSION>~${CI_COMMIT_SHORT_SHA}~" k8s-deployment.yml
        - sed -i "s~<DOCKER_IMAGE>~${DOCKER_IMAGE}~" k8s-deployment.yml
        - kubectl apply -n ${CHEMBL_NS_STAGING} -f k8s-deployment.yml
    # when: manual
    only:
        - staging

after_script:
    - echo "End of script"
